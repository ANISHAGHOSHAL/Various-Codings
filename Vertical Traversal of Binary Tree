//Initial Template for Java

//Contributed by Sudarshan Sharma
import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class GfG {
    
    static Node buildTree(String str){
        
        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }
        
        String ip[] = str.split(" ");
        // Create the root of the tree
        Node root = new Node(Integer.parseInt(ip[0]));
        // Push the root to the queue
        
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        // Starting from the second element
        
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            
            // Get and remove the front of the queue
            Node currNode = queue.peek();
            queue.remove();
                
            // Get the current node's value from the string
            String currVal = ip[i];
                
            // If the left child is not null
            if(!currVal.equals("N")) {
                    
                // Create the left child for the current node
                currNode.left = new Node(Integer.parseInt(currVal));
                // Push it to the queue
                queue.add(currNode.left);
            }
                
            // For the right child
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            // If the right child is not null
            if(!currVal.equals("N")) {
                    
                // Create the right child for the current node
                currNode.right = new Node(Integer.parseInt(currVal));
                    
                // Push it to the queue
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    static void printInorder(Node root)
    {
        if(root == null)
            return;
            
        printInorder(root.left);
        System.out.print(root.data+" ");
        
        printInorder(root.right);
    }
    
	public static void main (String[] args) throws IOException{
	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	        
	        int t=Integer.parseInt(br.readLine());
    
	        while(t-- > 0){
	            String s = br.readLine();
    	    	Node root = buildTree(s);
                Solution obj = new Solution();
                ArrayList <Integer> res = obj.verticalOrder(root);
                for (Integer num : res) System.out.print(num + " "); 
                System.out.println();
    	        
	        }
	}
}
// } Driver Code Ends


//User function Template for Java


class MyPair
{
    Node node;
    int hd;
    MyPair(Node n, int h)
    {
        node = n;
        hd = h;
    }
}

class Solution
{
    //Function to find the vertical order traversal of Binary Tree.
    static ArrayList <Integer> verticalOrder(Node root)
    {
        ArrayList <Integer> res = new ArrayList <Integer>(0);
        
        //creating empty queue for level order traversal.
        Queue<MyPair>q=new LinkedList<MyPair>();
        
        //creating a map to store nodes at a particular horizontal distance.
        Map<Integer,ArrayList<Integer>>mp=new TreeMap<>();
        
        q.add(new MyPair(root, 0));
        while(!q.isEmpty())
        {
            MyPair temp = q.poll();
            Node temp_root = temp.node;
            int hd = temp.hd;
            if (mp.containsKey(hd))
            {
                ArrayList<Integer>al=mp.get(hd);
                al.add(temp_root.data);
                mp.put(hd,al);
            }
            else
            {
                ArrayList<Integer>al=new ArrayList<>();
                al.add(temp_root.data);
                mp.put(hd,al);
            }
            
            //if left child of temp_root exists, pushing it in
            //the queue with the horizontal distance.
            if(temp_root.left!=null)
                q.add(new MyPair(temp_root.left, hd-1));
            
            //if right child of temp_root exists, pushing it in
            //the queue with the horizontal distance.
            if(temp_root.right!=null)
                q.add(new MyPair(temp_root.right, hd+1));
            
        }
        
        //traversing the map and storing the nodes in list 
        //at every horizontal distance.
        for(Map.Entry<Integer,ArrayList<Integer>>m:mp.entrySet())
        {
            ArrayList<Integer>al=m.getValue();
            for(int i=0;i<al.size();i++)
              res.add(al.get(i));
        }
        //returning the output list.
        return res;
    }
}
